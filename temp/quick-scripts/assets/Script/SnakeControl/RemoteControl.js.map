{"version":3,"sources":["RemoteControl.js"],"names":["o0","require","o0CC","o0Game","cc","Class","extends","properties","remotePosition","update","dt","node","isValid","log","snake","updateBodySpacing","updateSpeed","t","speedRate","score","minScore","normalSpeedRate","targetSpeedRate","i","targetRotation","rotationFromVector","targetVector","head","rotation","nextRotation","turningSpeed","maximumSynchronizationDistance","speed","minus","Vector2","x","y","length","toLength","updateSnakeBody","pulsatingFeedback","onCollisionEnter","other","self","onCollisionExit"],"mappings":";;;;;;AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;;AAGAG,GAAGC,KAAH,CAAS;AACLC,aAASL,QAAQ,cAAR,CADJ;;AAGLM,gBAAY;AACRC,wBAAe;AADP,KAHP;AAMLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAG,KAAKC,IAAL,IAAa,IAAb,IAAqB,KAAKA,IAAL,CAAUC,OAAV,IAAqB,KAA7C,EAAmD;AAC/CR,eAAGS,GAAH,CAAO,sBAAP;AACH;;AAED,YAAG,KAAKD,OAAL,IAAgB,KAAhB,IAAyB,KAAKD,IAAL,IAAa,IAAtC,IAA8C,KAAKA,IAAL,CAAUC,OAAV,IAAqB,KAAnE,IAA4E,KAAKE,KAAL,IAAc,IAA7F,EAAkG;AAC9F;AACH;AACD,aAAKC,iBAAL;AACA,aAAKC,WAAL;AACA;;;AAIA,aAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAE,CAAhB,EAAkB,EAAEA,CAApB,EAAsB;;AAElB,gBAAIC,SAAJ;AACA,gBAAG,KAAKJ,KAAL,CAAWK,KAAX,IAAoB,KAAKC,QAA5B,EACIF,YAAY,KAAKG,eAAjB,CADJ,KAEI;AACAH,4BAAY,KAAKI,eAAjB;AACH;;AAED,iBAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAEL,SAAhB,EAA0B,EAAEK,CAA5B,EAA8B;AAC1B,qBAAKC,cAAL,GAAsBtB,KAAKuB,kBAAL,CAAwB,KAAKC,YAA7B,CAAtB;AACA,qBAAKZ,KAAL,CAAWa,IAAX,CAAgBC,QAAhB,GAA2B1B,KAAK2B,YAAL,CAAkB,KAAKf,KAAL,CAAWa,IAAX,CAAgBC,QAAlC,EAA2C,KAAKJ,cAAhD,EAA+D,KAAKM,YAApE,CAA3B;;AAEA,oBAAG,KAAKtB,cAAL,IAAqB,IAAxB,EAA6B;AACzB;AACA;AACA,wBAAIuB,iCAAiC,KAAKC,KAAL,GAAW,GAAhD;AACA,wBAAIN,eAAe,KAAKlB,cAAL,CAAoByB,KAApB,CAA0B,IAAIjC,GAAGkC,OAAP,CAAe,KAAKpB,KAAL,CAAWa,IAAX,CAAgBQ,CAA/B,EAAiC,KAAKrB,KAAL,CAAWa,IAAX,CAAgBS,CAAjD,CAA1B,CAAnB;AACA,wBAAGV,aAAaW,MAAb,IAAqBN,8BAAxB,EAAuD;AACnD,6BAAKjB,KAAL,CAAWa,IAAX,CAAgBQ,CAAhB,GAAoB,KAAK3B,cAAL,CAAoB2B,CAAxC;AACA,6BAAKrB,KAAL,CAAWa,IAAX,CAAgBS,CAAhB,GAAoB,KAAK5B,cAAL,CAAoB4B,CAAxC;AACH,qBAHD,MAGK;AACDV,uCAAeA,aAAaY,QAAb,CAAsBP,iCAA+B,CAACL,aAAaW,MAAb,GAAoBN,8BAArB,IAAqD,GAA1G,CAAf;AACA,6BAAKjB,KAAL,CAAWa,IAAX,CAAgBQ,CAAhB,IAAqBT,aAAaS,CAAlC;AACA,6BAAKrB,KAAL,CAAWa,IAAX,CAAgBS,CAAhB,IAAqBV,aAAaU,CAAlC;AACH;AACJ;;AAED,qBAAKG,eAAL;AACH;AACJ;AACD,aAAKC,iBAAL;AACH,KApDI;AAqDLC,sBAAiB,0BAASC,KAAT,EAAeC,IAAf,EAAoB,CACpC,CAtDI;AAuDLC,qBAAgB,yBAASF,KAAT,EAAeC,IAAf,EAAoB,CACnC,CAxDI,CAwDH;AAxDG,CAAT","file":"RemoteControl.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\SnakeControl","sourcesContent":["var o0 = require('o0');\r\nvar o0CC = require('o0CC');\r\nvar o0Game = require('o0Game');\r\n\r\n\r\ncc.Class({\r\n    extends: require('LocalControl'),\r\n\r\n    properties: {\r\n        remotePosition:null,\r\n    },\r\n    update: function (dt) {  \r\n        if(this.node == null || this.node.isValid == false){\r\n            cc.log(\"Memory leak: Control\");\r\n        }\r\n\r\n        if(this.isValid == false || this.node == null || this.node.isValid == false || this.snake == null){\r\n            return;\r\n        }\r\n        this.updateBodySpacing();\r\n        this.updateSpeed();\r\n        //for(var t = 0;t<this.fixedTimer.fixedUpdateTimes(dt);++t){\r\n\r\n\r\n        \r\n        for(var t = 0;t<1;++t){\r\n\r\n            var speedRate;\r\n            if(this.snake.score <= this.minScore)\r\n                speedRate = this.normalSpeedRate;\r\n            else{\r\n                speedRate = this.targetSpeedRate;\r\n            }\r\n\r\n            for(var i = 0;i<speedRate;++i){\r\n                this.targetRotation = o0CC.rotationFromVector(this.targetVector);\r\n                this.snake.head.rotation = o0CC.nextRotation(this.snake.head.rotation,this.targetRotation,this.turningSpeed);\r\n\r\n                if(this.remotePosition!=null){\r\n                    //this.snake.head.x = this.remotePosition.x;\r\n                    //this.snake.head.y = this.remotePosition.y;\r\n                    var maximumSynchronizationDistance = this.speed*1.1;\r\n                    var targetVector = this.remotePosition.minus(new o0.Vector2(this.snake.head.x,this.snake.head.y));\r\n                    if(targetVector.length<=maximumSynchronizationDistance){\r\n                        this.snake.head.x = this.remotePosition.x;\r\n                        this.snake.head.y = this.remotePosition.y;\r\n                    }else{\r\n                        targetVector = targetVector.toLength(maximumSynchronizationDistance+(targetVector.length-maximumSynchronizationDistance)*0.2);\r\n                        this.snake.head.x += targetVector.x;\r\n                        this.snake.head.y += targetVector.y;\r\n                    }\r\n                }\r\n\r\n                this.updateSnakeBody();\r\n            }\r\n        }\r\n        this.pulsatingFeedback();\r\n    },\r\n    onCollisionEnter:function(other,self){\r\n    },\r\n    onCollisionExit:function(other,self){\r\n    },//必须覆盖为空白\r\n});"]}