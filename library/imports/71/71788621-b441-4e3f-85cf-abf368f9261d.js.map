{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\SnakeControl/assets\\Script\\SnakeControl\\LocalControl.js"],"names":["o0","require","o0CC","o0Game","cc","Class","extends","CircleCollider","properties","speed","turningSpeed","normalSpeedRate","speedingSpeedRate","targetSpeedRate","isSpeeding","get","targetVector","bodySpacingRate","bodySpacing","pulledScore","pullScoreThreshold","Math","pow","snake","body","scaleX","scaleY","pullScoreRate","speedingScoreCost","minScore","fixedTimer","updateSpeed","updateBodySpacing","radius","sqrt","setTargetSpeeding","bool","setTargetVector","vector","removeTargetVector","vectorFromRotation","head","rotation","addScore","score","setScore","pullFood","newFood","addScriptNode","gameScene","foodNode","lastBody","length","foodPosition","randomInCircle2","node","x","y","name","foodIDcounter","pullAllFood","pullScore","arguments","updateSnakeBody","i","j","Vector2","moveDistance","ceil","bodyLength","mod","rotationFromVector","pulsatingFeedback","graphics","getComponent","Graphics","clear","timeRemainder","abs","Date","getTime","circle","strokeColor","Color","stroke","onLoad","parent","size","updateScale","start","FixedTimerDT","update","dt","isValid","log","t","speedRate","targetRotation","nextRotation","moveVector","onCollisionEnter","other","self","active","groupIndex","GroupIndex","Body","selfBody","destroy","Food","onCollisionExit","PlayGround","_onPreDestroy"],"mappings":"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","file":"LocalControl.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\SnakeControl","sourcesContent":["var o0 = require('o0');\r\nvar o0CC = require('o0CC');\r\nvar o0Game = require('o0Game');\r\n\r\n\r\ncc.Class({\r\n    extends: cc.CircleCollider,\r\n\r\n    properties: {\r\n        speed: 1,//per frame\r\n        turningSpeed: 6,//degree per frame\r\n        normalSpeedRate: 1,//加速时的速度比率\r\n        speedingSpeedRate: 3,//加速时的速度比率\r\n        targetSpeedRate: 1,//当前速度比率\r\n        isSpeeding: {\r\n            get: function (){\r\n                return this.targetSpeedRate != this.normalSpeedRate;\r\n            }\r\n        },\r\n\r\n        targetVector:null,\r\n        \r\n        bodySpacingRate: 0.4,//rate of size\r\n        bodySpacing: 0,\r\n\r\n        pulledScore: 0,\r\n        pullScoreThreshold: {\r\n            get: function (){\r\n                return Math.pow(this.snake.body[0].scaleX * this.snake.body[0].scaleY,1) * 2;\r\n            }\r\n        },\r\n        pullScoreRate:0.7,//the rate means remove 1 score from snake, and 0.5 score will come out to be food. \r\n        speedingScoreCost: 0.1,//score cost per frame speeding \r\n        minScore: 5,\r\n        snake:null,\r\n        fixedTimer:null,\r\n    },\r\n    updateSpeed:function(){\r\n        this.speed = 5 * Math.pow(this.snake.body[0].scaleX * this.snake.body[0].scaleY,1.0/3);\r\n    },\r\n    updateBodySpacing:function(){\r\n        this.bodySpacing = this.radius*2 * this.bodySpacingRate * Math.sqrt(this.snake.body[0].scaleX * this.snake.body[0].scaleY);\r\n    },\r\n    setTargetSpeeding:function(bool){\r\n        if(!bool)\r\n            this.targetSpeedRate = this.normalSpeedRate;\r\n        else\r\n            this.targetSpeedRate = this.speedingSpeedRate;\r\n    },\r\n    setTargetVector:function(vector){\r\n        this.targetVector = vector;\r\n    },\r\n    removeTargetVector:function(){\r\n        this.setTargetVector(o0CC.vectorFromRotation(this.snake.head.rotation));\r\n    },\r\n    addScore: function (score) {\r\n        if(this.snake == null){\r\n            return;\r\n        }\r\n           \r\n        this.snake.setScore(this.snake.score + score);\r\n        //this.snake.score += score;\r\n        //this.snake.updateScale();\r\n        this.updateBodySpacing();\r\n        this.updateSpeed();\r\n        /*var targetBodyLength = Math.ceil(this.snake.bodyLength);\r\n        while(targetBodyLength > this.snake.body.length){\r\n            this.snake.addBody();\r\n        }/** */\r\n    },\r\n    pullFood: function (score) {\r\n        var newFood = o0CC.addScriptNode(this.snake.gameScene.foodNode,'Food',-100);\r\n        var lastBody = this.snake.body[this.snake.body.length-1];\r\n        var foodPosition = o0.randomInCircle2(lastBody,(this.radius-newFood.radius)*2);\r\n        newFood.node.x = foodPosition.x;\r\n        newFood.node.y = foodPosition.y;\r\n        newFood.score = score;\r\n        newFood.node.name = ''+(this.snake.gameScene.foodIDcounter++);\r\n    },\r\n    pullAllFood: function () {\r\n        var pullScoreThreshold = this.pullScoreThreshold;\r\n        while(this.snake.score >= 1){\r\n            this.pullScore(1,pullScoreThreshold);\r\n        }\r\n    },\r\n    pullScore:function(score){  \r\n        this.snake.setScore(this.snake.score - score);      \r\n        //this.snake.score -= score;\r\n        //this.snake.updateScale();\r\n        this.updateBodySpacing();\r\n        this.updateSpeed();\r\n        this.pulledScore += score * this.pullScoreRate;\r\n\r\n        var pullScoreThreshold;\r\n        if(arguments.length < 2){\r\n            pullScoreThreshold = this.pullScoreThreshold;\r\n        }else{\r\n            pullScoreThreshold = arguments[1];\r\n        }\r\n\r\n        if(this.pulledScore >= pullScoreThreshold){\r\n            this.pulledScore -= pullScoreThreshold;\r\n            this.pullFood(pullScoreThreshold);\r\n        }/*\r\n        var targetBodyLength = Math.ceil(this.snake.bodyLength);\r\n        while(targetBodyLength < this.snake.body.length && this.snake.body.length > 1){\r\n            this.snake.removeBody();\r\n        }/** */\r\n    },\r\n    updateSnakeBody:function(){\r\n        //cc.log(this.getComponent('Snake').body.length);\r\n        for(var i = 0, j = 1;j<this.snake.body.length;++i, ++j){\r\n            var targetVector = new o0.Vector2(this.snake.body[i].x-this.snake.body[j].x,this.snake.body[i].y-this.snake.body[j].y);\r\n            var moveDistance = targetVector.length - this.bodySpacing;\r\n            if(j==this.snake.body.length-1)\r\n                moveDistance += this.bodySpacing * (Math.ceil(this.snake.bodyLength)-this.snake.bodyLength)\r\n            targetVector = targetVector.mod;\r\n            this.snake.body[j].rotation = o0CC.rotationFromVector(targetVector);\r\n            if(moveDistance <= 0)\r\n                continue;\r\n            this.snake.body[j].x += targetVector.x * moveDistance;\r\n            this.snake.body[j].y += targetVector.y * moveDistance;/** */\r\n        }\r\n    },/** */\r\n    /*\r\n    destroySnake: function(){\r\n        this.node.active = false;//防止destory之前body再增长\r\n        while(this.snake.score >= 1){\r\n            this.pullScore(1);\r\n        }\r\n        while(this.snake.body.length > 1){\r\n            this.removeBody();\r\n        }\r\n        //cc.log(this.snake.score);\r\n        //this.destroy();\r\n    },/** */\r\n    pulsatingFeedback:function(){\r\n        if(this.isSpeeding && this.snake.score > this.minScore){\r\n            for(var i =0;i<this.snake.body.length;++i){\r\n                var graphics = this.snake.body[i].getComponent(cc.Graphics);\r\n                if(graphics==null){\r\n                    return;\r\n                }\r\n                graphics.clear();\r\n                var timeRemainder = Math.abs(((new Date()).getTime()/10 - i*2)%40-20);\r\n                for(var j = 0;j<timeRemainder;++j){\r\n                    graphics.circle(0, 0, this.radius+j);\r\n                    graphics.strokeColor = new cc.Color(255,255,255,(timeRemainder-j)*5);\r\n                    graphics.stroke();\r\n                }\r\n            }\r\n        }else{\r\n            for(var i =0;i<this.snake.body.length;++i){\r\n                var graphics = this.snake.body[i].getComponent(cc.Graphics);\r\n                if(graphics==null){\r\n                    return;\r\n                }\r\n                graphics.clear();\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.snake = this.node.parent.getComponent('Snake');\r\n        this.radius = this.snake.size/2;\r\n        this.removeTargetVector();\r\n\r\n        this.snake.updateScale();\r\n        this.updateBodySpacing();\r\n        this.updateSpeed();\r\n    },\r\n    start: function () {\r\n        this.addScore(10);\r\n        //cc.log(this.snake.body.length);\r\n\r\n        this.fixedTimer = new o0.FixedTimerDT(60);\r\n    },\r\n    \r\n    // called every frame\r\n    update: function (dt) {\r\n        if(this.node == null || this.node.isValid == false){\r\n            cc.log(\"Memory leak: Control\");\r\n        }\r\n\r\n\r\n        if(this.isValid == false || this.node == null || this.node.isValid == false || this.snake == null){\r\n            return;\r\n        }\r\n        //for(var t = 0;t<this.fixedTimer.fixedUpdateTimes(dt);++t){\r\n        for(var t = 0;t<1;++t){\r\n    \r\n            var speedRate;\r\n            if(this.snake.score <= this.minScore)\r\n                speedRate = this.normalSpeedRate;\r\n            else{\r\n                speedRate = this.targetSpeedRate;\r\n                if(speedRate != this.normalSpeedRate && speedRate == this.speedingSpeedRate)\r\n                    this.pullScore(this.speedingScoreCost);\r\n            }\r\n            for(var i = 0;i<speedRate;++i){\r\n                //移动蛇头\r\n                this.targetRotation = o0CC.rotationFromVector(this.targetVector);\r\n                this.snake.head.rotation = o0CC.nextRotation(this.snake.head.rotation,this.targetRotation,this.turningSpeed);\r\n                var moveVector = o0CC.vectorFromRotation(this.snake.head.rotation);\r\n                this.snake.body[0].x += moveVector.x*this.speed;\r\n                this.snake.body[0].y += moveVector.y*this.speed;/** */\r\n                \r\n                //////////////下面是移动蛇身\r\n                this.updateSnakeBody();\r\n            }\r\n        }\r\n        this.pulsatingFeedback();\r\n    },\r\n    onCollisionEnter:function(other,self){\r\n        if(other.node == null || other.node.active == false || this.node == null || this.node.active == false){//貌似能解决两蛇对撞导致卡死的bug\r\n            return;\r\n        }\r\n        if(self != this){\r\n            return;\r\n        }\r\n        if(other.node.groupIndex == o0Game.GroupIndex.Body){\r\n            //cc.log(\"aaaaaaaaaaaaaaaaaaa\");\r\n            var selfBody = false;\r\n            if(this.snake.body.length > 1)\r\n                for(var i = 1; i<this.snake.body.length;++i){\r\n                    if(other.node == this.snake.body[i]){\r\n                        selfBody = true;\r\n                        break;\r\n                    }\r\n                }\r\n            if(selfBody == false){\r\n                this.pullAllFood();\r\n                this.snake.node.destroy();\r\n            }\r\n        }\r\n        if(other.node.groupIndex == o0Game.GroupIndex.Food){\r\n            this.addScore(other.score);\r\n            other.node.destroy();\r\n            //other.destroy();\r\n        }/* */\r\n    },\r\n    onCollisionExit:function(other,self){\r\n        if(other.node == null || other.node.active == false || this.node == null || this.node.active == false){//貌似能解决两蛇对撞导致卡死的bug\r\n            return;\r\n        }\r\n        if(self != this){\r\n            return;\r\n        }\r\n        if(other.node.groupIndex == o0Game.GroupIndex.PlayGround){\r\n            //this.o0Destroy();\r\n            this.pullAllFood();\r\n            this.snake.node.destroy();\r\n        }/* */\r\n    },\r\n\r\n/*\r\n    o0Destroy:function(){\r\n        this.node.active = false;\r\n        //this.node.removeComponent(this);\r\n        this.destroy();\r\n        this.node.destroy();\r\n    },/** */\r\n    _onPreDestroy:function(){\r\n    },\r\n});\r\n"]}